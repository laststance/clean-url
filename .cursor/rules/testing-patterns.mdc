---
globs: tests/**/*.ts,*.test.ts,vitest.config.ts,playwright.config.ts
description: Testing architecture and patterns for unit and e2e tests
---

# Testing Architecture

## Unit Testing (Vitest)

### Configuration
- **Environment**: jsdom for DOM simulation
- **Pattern**: `tests/unit/**/*.test.ts`
- **Coverage Target**: 80% (currently 93.78% on core logic)

### Test Structure
```typescript
describe('cleanUrl', () => {
  it('removes UTM parameters', () => {
    const result = cleanUrl('https://example.com?utm_source=test');
    expect(result.cleanedUrl).toBe('https://example.com');
  });
});
```

### Key Test Files
- **`clean-url-logic.test.ts`** - Core cleaning function tests
- **`clean-url-coverage.test.ts`** - Comprehensive parameter coverage
- **`clean-url-direct.test.ts`** - Direct function call tests
- **`clean-url-simple.test.ts`** - Basic functionality tests

## End-to-End Testing (Playwright)

### Configuration
- **Browser**: Chrome with extension loading (`--load-extension=.output/chrome-mv3`)
- **Reporter**: List reporter
- **Artifacts**: Videos/screenshots only on failure

### Test Files
- **`clean-url.spec.js`** - Main E2E extension functionality
- **`service-worker.spec.js`** - Background script testing
- **`simple-test.spec.js`** - Basic extension loading

### Test Setup
- **Global Setup**: Extension building and browser preparation
- **Fixtures**: `fixtures.js` provides test utilities
- **Web Server**: Starts dev server for testing

## Test Data

### URL Fixtures
- **`tests/test-urls.json`** - Real-world URL examples
- Categories: UTM, social media, email, affiliate, analytics
- Includes expected cleaned results for validation

## Testing Commands

### Unit Tests
- `pnpm test:unit` - Run unit tests
- `pnpm test:watch` - Watch mode
- `pnpm test:coverage` - Coverage report
- `pnpm test:ui` - Vitest UI

### E2E Tests
- `pnpm test:e2e` - Run Playwright tests
- `pnpm install:playwright` - Install browsers

### Combined
- `pnpm test` - All tests
- `pnpm validate` - Lint + tests + typecheck

## Testing Best Practices

- **Real-world examples** over synthetic test data
- **Parameter preservation** testing (essential params kept)
- **Error handling** validation
- **Performance considerations** for large URLs
- **Extension behavior** verification in browser context