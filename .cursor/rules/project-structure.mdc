---
alwaysApply: true
description: Project architecture and file structure guidelines for the Clean URL Chrome extension
---

# Project Structure

## WXT Framework Architecture

This Chrome extension is built with **WXT** (Web Extension Toolkit), a next-generation framework that provides:

- File-based entrypoint system
- Auto-generated manifest from configuration
- Hot Module Replacement (HMR) during development
- Built-in TypeScript support
- Multi-browser support (Chrome, Firefox, Safari)

## Core Module Structure

### Entrypoints
- **`entrypoints/popup/`** - Extension popup interface
  - `index.html` - Popup HTML structure
  - `main.ts` - Popup logic and UI interactions
  - `style.css` - Popup styling
- **`entrypoints/background.ts`** - Service worker for badge updates and context menus

### Core Logic
- **`utils/clean-url-logic.ts`** - Main URL cleaning engine with comprehensive tracking parameter patterns
- **`wxt.config.ts`** - WXT configuration with manifest settings

### Assets & Resources
- **`public/`** - Static assets (icons, privacy policy)
- **`icons/`** - Extension icon files in various sizes

### Testing
- **`tests/unit/`** - Unit tests using Vitest with jsdom
- **`tests/e2e/`** - End-to-end tests using Playwright
- **`tests/test-urls.json`** - Real-world URL test fixtures

## Build Output

After `pnpm build`, the extension builds to `.output/chrome-mv3/`:
- `manifest.json` - Auto-generated manifest
- `background.js` - Bundled service worker
- `popup.html/js/css` - Popup interface files
- Icon files and static assets

## Module System

- **ES Modules** - Standard `export`/`import` syntax throughout
- **TypeScript** - Full type safety with interfaces for all data structures
- **Relative imports** - No path aliases, using relative paths for better compatibility